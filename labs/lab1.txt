Тема: "Классовые структуры. Наследование."
Цель: "Изучить работу с классами и наследованием на языке программирования Java"

Все НЕ статичные поля классов которые наслеюдуются другими классами имеют модифатор доступа protected
Все НЕ статичные поля классов которые НЕ наследуются другими классами имеют модифатор доступа private
Все статичные поля в классах имею модифатор доступа private, если к ним нужен доступ - генерируется статичный геттер
Ко всем НЕ статичным private и protected полям нужно сделать геттеры и сеттеры(если поле не final)
В каждом классе должен быть сгенерирован переопределенный метод toString()
Поля с хп, координатами и все остальное, что не указано ниже заполняете вы сами на свое усмотрение
Задача лабороторной - создать описанную ниже структуру и протестировать ее работоспособность
Если что-то не понятно по заданию или вы нашли недочет - напишите мне

1 лаборатная работа для потока Y2333-35 выдана 12.02.21
До 07.03.21 включительно лаборатнуб можно спокойно сдать на 5, дальше будет 100% -1 балл
Если у меня возникнут какие-то вопросы по лабороторной, могу спросить по ее содержанию.

class GameServer //класс нужно оформит с использованием инстанцирования https://pa4ok.ru/itmo/instance.png
- String ip
- int difficulty (1-3)
- Entity[] entites
- public void updateServer() //вызывает update() у всех entity
- public static void main(String[] args)
	//создает новый объект класса GameServer используя шаблон инстанцирования и выводит в его в консоль
	//после чего в цикле на 30(или больше если хотите) итераций раз в секунду вызывает обновление сервера
	//следующим кодом можно сделать задерку сервера на 1000 миллисекунд
	/*try {
            Thread.sleep(1000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }*/
	//после завершения цикла выводит объект GameServer в консоль

class Entity
- private static int idCounter = 1;
- final long id //приравнивается idCounter, после чего idCounter увеличивается на 1
- String title
- double posX
- double posZ
- boolean agressive
- int maxHealth //максимально кол-во жизней
- int health //текущее кол-во жизней
- int attackDamage //урон
- public void update()
	//если agressive == true, то сущность ищет ближашую к себе не агрессивную Entity в раудиусе 20 ед. и движется к ней
	//за 1 обновление сервера сущность может пройти 1 ед. по x и 1 ед. по z
	//если расстояние до атакуемой сущности <2 ед. то вызывается метод attack(entity)
- public void attack(Entity entity)
	//если entity не является игроком, то ей просто наносится урон ()
	//если entity это EntityPlayer, то после удада по игроку, если хп >0, он наносит ответный удар
	//урон наносится по формуле entity.attackDamage + 0.5 * difficulty (получаем через инстанцирование из объекта GameServer)
	//если после нанесения урона сущности ее хп <= 0 она удаляется из мира и в консоль выводится кто и кого убил

class EntityPlayer extends Entity //передает в родительский конструктор agressive = false
- String nickname
- public void update()
	//сначала вызывает родительскую реализацию
	//и раз в 2 обновлений серверва, если health < maxHealth регенирует себе 1 хп (реализация, счетчик обновлений уже за вами)

